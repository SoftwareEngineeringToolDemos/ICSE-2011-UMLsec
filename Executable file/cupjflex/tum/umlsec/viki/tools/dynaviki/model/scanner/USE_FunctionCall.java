/*
 * Generated by classgen, version 1.3
 * 15/01/04 14:52
 */
package tum.umlsec.viki.tools.dynaviki.model.scanner;

public class USE_FunctionCall extends USE_EffectBase implements SyntaxNode {

  private SyntaxNode parent;
  private USE_RTerm callTarget;
  private String functionName;
  private USE_ParameterList parList;

  public USE_FunctionCall (USE_RTerm callTarget, String functionName, USE_ParameterList parList) {
    this.callTarget = callTarget;
    if (callTarget != null) callTarget.setParent(this);
    this.functionName = functionName;
    this.parList = parList;
    if (parList != null) parList.setParent(this);
  }

  public USE_RTerm getCallTarget() {
    return callTarget;
  }

  public void setCallTarget(USE_RTerm callTarget) {
    this.callTarget = callTarget;
  }

  public String getFunctionName() {
    return functionName;
  }

  public void setFunctionName(String functionName) {
    this.functionName = functionName;
  }

  public USE_ParameterList getParList() {
    return parList;
  }

  public void setParList(USE_ParameterList parList) {
    this.parList = parList;
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (callTarget != null) callTarget.accept(visitor);
    if (parList != null) parList.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (callTarget != null) callTarget.traverseTopDown(visitor);
    if (parList != null) parList.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (callTarget != null) callTarget.traverseBottomUp(visitor);
    if (parList != null) parList.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("USE_FunctionCall(\n");
      if (callTarget != null)
        buffer.append(callTarget.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append("  "+tab+functionName);
    buffer.append("\n");
      if (parList != null)
        buffer.append(parList.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [USE_FunctionCall]");
    return buffer.toString();
  }
}
