<project name="vikiweb" default="all" basedir="." >

<!-- ===================== Property Definitions =========================== -->
<!--
  Each of the following properties are used in the build script.
  Values for these properties are set by the first place they are
  defined, from the following list:

  * Definitions on the "ant" command line (ant -Dfoo=bar compile).

  * Definitions from a "build.properties" file in the top level
    source directory of this application.

  * Definitions from a "build.properties" file in the developer's
    home directory.

  * Default definitions in this build.xml file.

  You will note below that property values can be composed based on the
  contents of previously defined properties.  This is a powerful technique
  that helps you minimize the number of changes required when your development
  environment is modified.  Note that property composition is allowed within
  "build.properties" files as well as in the "build.xml" script.
-->
  <property file="build.properties"/>
  <property file="${user.home}/build.properties"/>

<!-- ==================== File and Directory Names ======================== -->
<!--

  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.

  app.name             Base name of this application, used to
                       construct filenames and directories.
                       Defaults to "myapp".

  app.path             Context path to which this application should be
                       deployed (defaults to "/" plus the value of the
                       "app.name" property).

  app.version          Version number of this iteration of the application.

  build.home           The directory into which the "prepare" and
                       "compile" targets will generate their output.
                       Defaults to "build".
-->

  <property name="app.name"      value="vikiweb"/>
  <property name="app.path"      value="/${app.name}"/>
  <property name="app.version"   value="0.1-dev"/>
  
  
  <property name="build.home"    value="${basedir}/webbuild" />
  
<!--  
  <property name="build.home"    value="Z:/webapps/ibis_ws_03_04"/>
 -->
  
  <property name="docs.home"     value="docs"/>
  <property name="src.home"      value="src"/>
  <property name="bin.home"      value="bin"/>
  <property name="web.home"      value="websrc"/>
  <property name="cfg.home"      value="webcfg"/>
  <property name="lib.home"      value="lib"/>



<!--  ==================== Compilation Control Options ==================== -->
<!--
  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?
  compile.deprecation  Should compilation include the deprecation option?
  compile.optimize     Should compilation include the optimize option?
-->
  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="true"/>

<!-- ==================== External Dependencies =========================== -->
<!--
  Use property values to define the locations of external JAR files on which
  your application will depend.  In general, these values will be used for
  two purposes:
  * Inclusion on the classpath that is passed to the Javac compiler
  * Being copied into the "/WEB-INF/lib" directory during execution
    of the "deploy" target.

  Because we will automatically include all of the Java classes that Tomcat 4
  exposes to web applications, we will not need to explicitly list any of those
  dependencies.  You only need to worry about external dependencies for JAR
  files that you are going to include inside your "/WEB-INF/lib" directory.
-->

<!-- Dummy external dependency -->
<!--
  <property name="foo.jar"
           value="/path/to/foo.jar"/>
-->

<!-- ==================== Compilation Classpath =========================== -->
<!--
  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.  The example below constructs the compile
  classpath to include the servlet.jar file, as well as the other components
  that Tomcat makes available to web applications automatically, plus anything
  that you explicitly added.
-->
  <path id="compile.classpath">

    <!-- Include all JAR files that will be included in /WEB-INF/lib -->
    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
    
    
<!--
    <pathelement location="${foo.jar}"/>
-->

    <!-- Include all elements that Tomcat exposes to applications -->
<!--
    <pathelement location="${catalina.home}/common/classes"/>
    <fileset dir="${catalina.home}/common/endorsed">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${catalina.home}/common/lib">
      <include name="*.jar"/>
    </fileset>
    
    <pathelement location="${catalina.home}/shared/classes"/>
    <fileset dir="${catalina.home}/shared/lib">
      <include name="*.jar"/>
    </fileset>
-->
  </path>



<!-- ==================== All Target ====================================== -->
<!--
  The "all" target is a shortcut for running the "clean" target followed
  by the "compile" target, to force a complete recompile.

-->
  <target name="all" depends="clean, compile"
   description="Clean build and dist directories, then compile"/>




<!-- ==================== Clean Target ==================================== -->
<!--
  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->
  <target name="clean"
   description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
  </target>




<!-- ==================== Compile Target ================================== -->
<!--
  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".
-->
  <target name="compile" description="Compile Java sources, copy to destination.">

    <!-- Create build directories as needed -->
    <mkdir  dir="${build.home}"/>
    <mkdir  dir="${build.home}/WEB-INF"/>
    <mkdir	dir="${build.home}/WEB-INF/lib"/>
    <mkdir  dir="${build.home}/WEB-INF/classes/umlsec/umlMetamodel"/>

<!--
    <copy todir="${build.home}/WEB-INF/lib" file="${foo.jar}"/>
-->

    <!-- Copy static files from external dependencies as needed -->
    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->

	<!-- will compile with eclipse to ${bin.home} instead
	    - Compile Java classes as necessary -
	    <mkdir    dir="${build.home}/WEB-INF/classes"/>
	    <javac srcdir="${src.home}"
	          destdir="${build.home}/WEB-INF/classes"
	            debug="${compile.debug}"
	      deprecation="${compile.deprecation}"
	         optimize="${compile.optimize}">
	    <classpath refid="compile.classpath"/>
	    </javac>
	
	    - Copy application resources -
	    <copy  todir="${build.home}/WEB-INF/classes">
	      <fileset dir="${src.home}" excludes="**/*.java"/>
	    </copy>
	-->


    <!-- Copy servlet configuration file -->
	<copy file="${cfg.home}\web.xml" tofile="${build.home}\WEB-INF\web.xml"/>

    <!-- Copy static content (jsp, pictures, etc) -->
	<copy todir="${build.home}">
		<fileset dir="${web.home}"/>
    </copy>

    <!-- Copy compiled (by eclipse) classes -->
	<copy todir="${build.home}\WEB-INF\classes" overwrite="yes">
		<fileset dir="${bin.home}" includes="**"/>
	</copy>
	
    <!-- Copy LIBs -->
	<copy todir="${build.home}\WEB-INF\lib" overwrite="yes">
		<fileset dir="${lib.home}" includes="**"/>
	</copy>

    <!-- Copy UML definitions -->
	<copy todir="${build.home}\WEB-INF\classes\umlsec\umlMetamodel" overwrite="yes">
		<fileset dir="umlMetamodel" includes="**"/>
	</copy>




<!--
		<copy todir="${dist}\jsp" overwrite="yes">
			<fileset dir="jsp" includes="**"/>
		</copy>
-->







  </target>





<!-- ==================== Dist Target ===================================== -->
<!--
  The "dist" target creates a binary distribution of your application
  in a directory structure ready to be archived in a tar.gz or zip file.
  Note that this target depends on two others:

  * "compile" so that the entire web application (including external
    dependencies) will have been assembled

  * "javadoc" so that the application Javadocs will have been created

-->

  <target name="dist" depends="compile"
   description="Create binary distribution">

    <!-- Copy documentation subdirectories -->
    <mkdir   dir="${build.home}/docs"/>
    <copy    todir="${build.home}/docs">
      <fileset dir="${docs.home}"/>
    </copy>

    <!-- Create application JAR file -->
    
    <jar jarfile="${app.name}.war" basedir="${build.home}" filesonly="false" />

<!--
		<jar jarfile="${dist}\vikiweb.war" basedir="${dist}" filesonly="false" includes="WEB-INF\**,jsp\**"/>
-->		


  </target>




<!-- ==================== Javadoc Target ================================== -->

<!--
  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.
-->
  <target name="javadoc" depends="compile"
   description="Create Javadoc API documentation">

    <mkdir          dir="docs/api"/>
    <javadoc sourcepath="${src.home}"
                destdir="docs/api"
           packagenames="*">
      <classpath refid="compile.classpath"/>
    </javadoc>
  </target>

</project>











<!--









<project name="vikiweb" default="create war" basedir=".\" >

	<property name="src" value="src"/>
	<property name="cfg" value="webcfg"/>
	<property name="build" value="webbin"/>
	<property name="dist" value="webdist"/>
	<property name="lib" value="lib"/>
    <property name="tomcatapp" value="c:\Java\jakarta-tomcat-4.1.27\webapps\vikiweb"/>
	<property name="tomcatwar" value="c:\Java\jakarta-tomcat-4.1.27\webapps\vikiweb.war"/>

	<property name="classes" value="${build}\classes"/>



	<property name="cpath" value="lib\servlet.jar"/>



	<target name="clean">
		<delete dir="${build}"/>
	</target>

	<target name="init">
		<mkdir dir="${build}"/>
	</target>

	<target name="build" depends="init">
		<delete dir="${classes}"/>
		<mkdir dir="${classes}"/>
		<javac debug="on" srcdir="${src}" destdir="${classes}" classpath="${cp}"/>
	</target>

	<target name="create war" depends="build">
		<delete dir="${dist}"/>
		<mkdir dir="${dist}"/>
		<mkdir dir="${dist}\WEB-INF"/>
		<mkdir dir="${dist}\WEB-INF\classes"/>
		<mkdir dir="${dist}\WEB-INF\lib"/>
		<mkdir dir="${dist}\jsp"/>

        <copy file="${cfg}\web.xml" tofile="${dist}\WEB-INF\web.xml"/>
		<copy todir="${dist}\WEB-INF\classes" overwrite="yes">
			<fileset dir="${classes}" includes="**"/>
		</copy>
		<copy todir="${dist}\WEB-INF\lib" overwrite="yes">
			<fileset dir="${lib}" includes="**"/>
		</copy>
		<copy todir="${dist}\jsp" overwrite="yes">
			<fileset dir="jsp" includes="**"/>
		</copy>

		<jar jarfile="${dist}\vikiweb.war" basedir="${dist}" filesonly="false" includes="WEB-INF\**,jsp\**"/>
	</target>


	<target name="deploy" depends="create war">
		<exec failonerror="no" dir="c:\java\jakarta-tomcat-3.2.4\bin" executable="c:\java\jakarta-tomcat-3.2.4\bin\shutdown.bat" />

		<delete dir="${tomcatapp}" />
		<delete file="${tomcatwar}"/>

        <copy file="${dist}\vikiweb.war" tofile="${tomcatwar}"/>

		<exec timeout="1000" failonerror="no" newenvironment="true" dir="c:\java\jakarta-tomcat-3.2.4\bin" executable="c:\java\jakarta-tomcat-3.2.4\bin\startup.bat" />
	</target>

</project>
-->
