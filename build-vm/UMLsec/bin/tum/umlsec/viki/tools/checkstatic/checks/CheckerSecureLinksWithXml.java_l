package tum.umlsec.viki.tools.checkstatic.checks;

//import tum.umlsec.viki.framework.mdr.IMdrWrapper;
//import tum.umlsec.viki.tools.checkstatic.IWriteText;

import java.io.*;
//import java.io.File;
//import java.io.FileReader;
//import java.io.Reader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;

import org.exolab.castor.mapping.*;
import org.exolab.castor.xml.*;
//import org.omg.uml.behavioralelements.commonbehavior.ALinkConnection;
import org.omg.uml.behavioralelements.commonbehavior.CommonBehaviorPackage;
import org.omg.uml.behavioralelements.commonbehavior.ComponentInstance;
//import org.omg.uml.behavioralelements.commonbehavior.ComponentInstanceClass;
import org.omg.uml.behavioralelements.commonbehavior.Link;
import org.omg.uml.behavioralelements.commonbehavior.LinkClass;
//import org.omg.uml.behavioralelements.commonbehavior.LinkEnd;
//import org.omg.uml.behavioralelements.commonbehavior.LinkEndClass;
import org.omg.uml.foundation.core.CorePackage;
import org.omg.uml.foundation.core.Dependency;
import org.omg.uml.foundation.core.DependencyClass;
import org.omg.uml.foundation.core.Stereotype;

import tum.umlsec.viki.framework.ITextOutput;
import tum.umlsec.viki.framework.mdr.IMdrContainer;
import tum.umlsec.viki.tools.checkstatic.StaticCheckerBase;
import tum.umlsec.viki.tools.checkstatic.ToolCheckStatic;
import tum.umlsec.viki.framework.toolbase.CommandParameterDescriptor;
import tum.umlsec.viki.framework.ExceptionProgrammLogicError;



/**
 * @author Shasha Meng
 *
 */
public class CheckerSecureLinksWithXml extends StaticCheckerBase 
{
	int z_D=0;
	int z_L=0;
	
	ITextOutput log;
	
	//File _xmlFile = new File("");
	
	
	
	public boolean check(IMdrContainer _mdrContainer, Iterator _parameters, ITextOutput _textOutput) {
		ITextOutput textOutput = _textOutput;
		
		org.omg.uml.UmlPackage root ;
              
		CorePackage corePackage ;

		// replacement for the init function
		root = _mdrContainer.getUmlPackage();
		corePackage = root.getCore();
		
		boolean dump = true;

//		UmlPackage root = _mdrWrapper.getUmlPackage();

//		CorePackage corePackage = root.getCore();
		CommonBehaviorPackage commonPackage= root.getCommonBehavior();
		textOutput.writeLn("==========================running CheckerSecureLinksWithXml...");				

		textOutput.writeLn("======= Dependencies");
		DependencyClass dependencyClass = corePackage.getDependency();
		for(Iterator iter1 = dependencyClass.refAllOfClass().iterator(); iter1.hasNext();)
		{
			Dependency dependency = (Dependency)iter1.next();
			String dependencyName = dependency.getName();
			textOutput.writeLn("The name of the dependency is " + dependencyName);
			
			for(Iterator it2 = (dependency.getClient()).iterator(); it2.hasNext();)
			{
				ComponentInstance clientComponent = (ComponentInstance)it2.next();
				String clientName = clientComponent.getName();
				String nodeName_cresident = (clientComponent.getNodeInstance()).getName();
				textOutput.writeLn("The name of the client component instance of the dependency is " + clientName + " and it is resident in the node instance " + nodeName_cresident);
			}
						
			for(Iterator it3 = (dependency.getSupplier()).iterator(); it3.hasNext();)
			{
				ComponentInstance supplierComponent = (ComponentInstance)it3.next();
			    String supplierName = supplierComponent.getName();
			    String nodeName_sresident = (supplierComponent.getNodeInstance()).getName();
			    textOutput.writeLn("The name of the supplier component instance of the dependency is " + supplierName + " and it is resident in the node instance " + nodeName_sresident);
			}
			
			
			for(Iterator iter2 = dependency.getStereotype().iterator();iter2.hasNext();)
			{
			    Stereotype stereotype_D = (Stereotype)iter2.next();
				String stereotypeName_dependency = stereotype_D.getName();
				textOutput.writeLn("The stereotype of the dependency is: " + stereotypeName_dependency);
			}
		    
			z_D++;
		   }
		 

				// list all the stereotypes of the links
		   textOutput.writeLn("=======Communication links");
		   LinkClass linkClass = commonPackage.getLink();
		   for(Iterator iter3 = linkClass.refAllOfClass().iterator(); iter3.hasNext();)
		   {
			  Link link = (Link)iter3.next();
			  String linkName = link.getName();
			  textOutput.writeLn("The name of the communication link is " + linkName);
			  for(Iterator iter4 = link.getStereotype().iterator();iter4.hasNext();)
			  {
				 Stereotype stereotype_L = (Stereotype)iter4.next();
				 String stereotypeName_link = stereotype_L.getName();
				 textOutput.writeLn("The stereotype of the communication link is " + stereotypeName_link);
			   }
         	
			   z_L++;
			}
		
            textOutput.writeLn("=======Hier begins the verification");
		    
		    
		    	try
			    {   
					if (z_D!=0&&z_L!=0)
					{
					LinkClass linkClass_T = commonPackage.getLink();	
					for(Iterator itera = linkClass_T.refAllOfClass().iterator(); itera.hasNext();)
			        {
			        	Link link_T = (Link)itera.next();
                        for(Iterator itera1 =link_T.getStereotype().iterator();itera1.hasNext();)
				        {
				        	Stereotype stereotypeLink = (Stereotype)itera1.next();
				        	String stereotypeName_link = stereotypeLink.getName();
				            //load a mapping file
				            Mapping mapping = new Mapping();
				            mapping.loadMapping("mapping.xml");
			
				            Unmarshaller unmarshaller = new Unmarshaller(AttackerBean.class);
				            unmarshaller.setMapping(mapping);
				     
				            // XML-File einlesen und parsen:
				            File _xmlFile = new File("");
		                    boolean _foundFile = false; 
		                    
		                    for (; _parameters.hasNext();) 
		                    {
			                   textOutput.writeLn("=======xML ist eingelesen!!!");
			                   CommandParameterDescriptor _parameter = (CommandParameterDescriptor) _parameters.next();
			                   if(_parameter.getId() == ToolCheckStatic.CPID_FILE) 
			                   {
				              

				                   _xmlFile = _parameter.getAsFile();
				                   _foundFile = true;
			                    }
		                     }
		                     
		                     if(_foundFile == false) 
		                     {
		                          throw new ExceptionProgrammLogicError("Required parameter missing");
		                     }
		
		                     String filePath = new String("");
		                     filePath = _xmlFile.getAbsolutePath();
		                     FileReader reader = new FileReader(filePath);
		                     AttackerBean attacker = (AttackerBean)unmarshaller.unmarshal(reader);
		                     reader.close();
		                     String attackerName = attacker.getName();
		                     textOutput.writeLn("The name of the attacker is " + attackerName);
		                 
		                     HashMap hmap= new HashMap();
			                 List l= new ArrayList();
			                 List beans = attacker.getBeans();
				             Iterator iter = beans.iterator();
			  	             while (iter.hasNext())
			                 {
				               Bean bean = (Bean) iter.next();
				               String stereotype_Link = bean.getStereotype();
				               l.add(bean.getThreat1());
				               l.add(bean.getThreat2());
				               l.add(bean.getThreat3());
				               l.add(bean.getThreat4());
				               hmap.put(stereotype_Link,l);
				              }
				              
				              Threaten threaten = new Threaten();
				              Vector v1 = threaten.threaten(new Attacker(attackerName), new Stereotype_Link(stereotypeName_link), hmap);
				        //textOutput.writeLn("The stereotype of the communication link is " + stereotypeName_link);
				        DependencyClass dependencyClass_ST = corePackage.getDependency();
						for(Iterator itera2 = dependencyClass_ST.refAllOfClass().iterator(); itera2.hasNext();)
						{
							Dependency dependency_ST = (Dependency)itera2.next();
						    for(Iterator itera3 = dependency_ST.getStereotype().iterator();itera3.hasNext();)
							{
								Stereotype stereotype_DT = (Stereotype)itera3.next();
								if (stereotype_DT.getName().equals("secrecy"))
							    {
							    	if (v1.contains("read"))
									{
										textOutput.writeLn("The UML model violates the requirement <<secure links>>.");
								        dump = false;
									}
									else
									{
									    textOutput.writeLn("The UML model satisfies the requirement <<secure links>>.");
									}
								 }
								     
								 if (stereotype_DT.getName().equals("integrity"))
								 {
								    if (v1.contains("insert"))
									{
									    textOutput.writeLn("The UML model violates the requirement <<secure links>>");
										dump = false;
									 }
									 else
									 {
									     textOutput.writeLn("The UML model satisfies the requirement <<secure links>>.");
									 }
								  }
								      
								  if (stereotype_DT.getName().equals("high"))
								  {
								     if (v1.isEmpty())
									 {
									    textOutput.writeLn("The UML model satisfies the requirement <<secure links>>.");
										
									  }
									  else
									  {
									    	textOutput.writeLn("The UML model violates the requirement <<secure links>>.");
											dump = false;
									  }
			                      }
			                        
								}
						}
					}
			   }		  
			}
			else
					{
						if (z_D==0)
						{
							textOutput.writeLn("There are no dependencies in the diagram.");
						}
						if (z_L==0)
						{
							textOutput.writeLn("There are no links in the diagram.");
						}

						textOutput.writeLn("The UML model satisfies the requirement <<secure links>>.");
					}
			    }
			catch (Exception e)
		   {
				System.out.println(e.toString());
		    }
								
		


         

		return dump;				
	
	}
	}

