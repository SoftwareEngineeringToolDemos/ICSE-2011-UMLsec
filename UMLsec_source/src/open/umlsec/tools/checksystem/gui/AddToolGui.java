/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddToolGui.java
 *
 * Created on Jan 14, 2010, 5:41:27 PM
 */

package open.umlsec.tools.checksystem.gui;

import java.awt.EventQueue;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.DefaultListModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.WindowConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import open.umlsec.tools.checksystem.ToolSystemVerification;
import open.umlsec.tools.checksystem.checks.Command;
import open.umlsec.tools.checksystem.checks.ToolDescriptor;

import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;

import tum.umlsec.viki.framework.toolbase.CommandDescriptor;
import tum.umlsec.viki.framework.toolbase.IVikiToolBase;

/**
 * 
 * @author (GUI) Serge Kater
 * @author (refactoring) Bianca Batsch, bianca.batsch@isst.fraunhofer.de
 * 
 */
@SuppressWarnings("serial")
public class AddToolGui extends JDialog {
	

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnAdd;
    private JButton btnClose;
    private JButton btnRefresh;
    
    private JList commandList;
    private JList toolList;
    
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel toolListModel;
    private DefaultListModel cmdListModel;

    private Vector<ToolDescriptor>	toolCollection;

    /** Creates new form AddToolGui */
    public AddToolGui(Frame parent, boolean modal) {
        super(parent, modal);
        init();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void init() {

        jScrollPane1 = new JScrollPane();
        jScrollPane2 = new JScrollPane();
        
        toolList = new JList();
        commandList = new JList();
        
        btnAdd = new JButton();
        btnClose = new JButton();
        btnRefresh = new JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        toolList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        toolList.setName("toolList"); // NOI18N
        toolList.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                toolListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(toolList);

        ResourceMap resourceMap = Application.getInstance(
     		   SystemVerificationLoader.class).getContext().getResourceMap(AddToolGui.class);
        btnAdd.setText(resourceMap.getString("btnAdd.text")); // NOI18N
        btnAdd.setName("btnAdd"); // NOI18N
        btnAdd.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnClose.setText(resourceMap.getString("btnClose.text")); // NOI18N
        btnClose.setName("btnClose"); // NOI18N
        btnClose.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        commandList.setName("commandList"); // NOI18N
        jScrollPane2.setViewportView(commandList);

        btnRefresh.setText(resourceMap.getString("btnRefresh.text")); // NOI18N
        btnRefresh.setActionCommand(resourceMap.getString("btnRefresh.actionCommand")); // NOI18N
        btnRefresh.setName("btnRefresh"); // NOI18N
        btnRefresh.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnRefresh)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 546, Short.MAX_VALUE)
                        .addComponent(btnAdd, GroupLayout.PREFERRED_SIZE, 67, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClose, GroupLayout.PREFERRED_SIZE, 64, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 396, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose)
                    .addComponent(btnAdd)
                    .addComponent(btnRefresh))
                .addContainerGap())
        );
        
        toolListModel = new DefaultListModel(); 
        cmdListModel = new DefaultListModel();
        commandList.setModel(cmdListModel);
        toolList.setModel(toolListModel);
        
        /* create the list of all tools and commands */
        toolCollection =  new Vector<ToolDescriptor>();
        
        try {
        	createToolList();
		} catch (Exception e) {
		}
        
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
		ToolSystemVerification 	systTool;
		ToolDescriptor 			tool;
    	int 					i;
    	int 					toolIdx;
    	Vector<Integer>			cmdIdxs = new Vector<Integer>();
    	Object[] 				cmdSelection;
    	
    	toolIdx 		= toolList.getSelectedIndex();
    	cmdSelection 	= commandList.getSelectedValues();
    	
		systTool = (ToolSystemVerification)
		SystemVerificationLoader.getTool(
			SystemVerificationLoader.TOOL_IDX_CHECKSYSTEM);
    	
		tool 	= toolCollection.get(toolIdx);
		
		/* the first entry of this list is always the tool index itself */
		cmdIdxs.add(toolIdx);

		for (i = 0; i < cmdSelection.length; i++){
        	cmdIdxs.add(tool.getCommand(cmdSelection[i].toString()).getCommandId());
    	}
		
		systTool.addToolWithCmds(tool.getToolReference(), cmdIdxs);
 
		//Security Repository
			if (tool.getToolReference().getToolName().equalsIgnoreCase("RiskFinder")){
				//Menuentry 'Repository' enablen
				SystemVerificationLoader.getGui().showRepositoryMenu();
			}
			
		SystemVerificationLoader.getGui().updateToolList();
		SystemVerificationLoader.getGui().getFrame().repaint();
		
    }

    private void btnCloseActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
    	dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnRefreshActionPerformed(ActionEvent evt) {
    	createToolList();
    	this.repaint();
    }
    
    private void toolListValueChanged(ListSelectionEvent evt) {
    	updateCommandList(toolList.getSelectedIndex());
    }
    
    private void updateToolList(){
    	int	i;
		
    	toolListModel.clear();
    	
		for (i = 0; i < toolCollection.size(); i++){
			toolListModel.addElement(
					toolCollection.get(i).getToolReference().getToolName() +
					toolCollection.get(i).getToolStatusString());
		}
		
    }
    
    private void updateCommandList(int toolIdx){
		ToolDescriptor	tool;
    	int 			i;
    	
		cmdListModel.clear();
    	
		try {
	    	tool = toolCollection.get(toolIdx);
			for (i = 0; i < tool.getCommands().size(); i++){
				cmdListModel.addElement(tool.getCommands().elementAt(i).getCommandName()
						+ tool.getCommands().elementAt(i).getCommandStatusString());
			}
		} catch (Exception e) {
		}
		
    }
    
    @SuppressWarnings("unchecked")
	private void createToolList(){
    	toolCollection.clear();
        for (int i = 1; i < SystemVerificationLoader.TOOL_IDX_MAX ; i++ ){
    		ToolDescriptor 	toolDesc 	= null;
			
    		IVikiToolBase refTool = SystemVerificationLoader.getTool(i);

    		toolDesc = new ToolDescriptor();	
			toolDesc.setToolReference(refTool);
			
			for (Iterator<CommandDescriptor> it = 
				refTool.getConsole().getConsoleCommands(); it.hasNext();){
				CommandDescriptor cmd = it.next();
				toolDesc.addCommand(new Command(cmd.getId(),cmd.getName()));
			}
			toolCollection.add(toolDesc);
        }
        
        updateToolList();
    }
    
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddToolGui dialog = new AddToolGui(new JFrame(), true);
                dialog.addWindowListener(new WindowAdapter() {
                    public void windowClosing(WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

}
